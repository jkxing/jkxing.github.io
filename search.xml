<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>搭建个人主页+个人学术主页</title>
    <url>/2022/09/20/build-academic-blog/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>最近深感写作有益，又中了一篇文章，于是就打算重新捡起去年随便建的一个博客。看了下大部分人的学术主页都非常纯粹，只有学术内容，所以我决定为学术主页单开一个页面。正好最近找到了一个通用学术主页模板，就想着把这个基于Jekyll的学术主页放在基于Hexo的个人主页下面，折腾一番后觉得效果还不错。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Win10</p>
<h1 id="个人主页"><a href="#个人主页" class="headerlink" title="个人主页"></a>个人主页</h1><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h1 id="学术主页"><a href="#学术主页" class="headerlink" title="学术主页"></a>学术主页</h1><h2 id="安装Jekyll"><a href="#安装Jekyll" class="headerlink" title="安装Jekyll"></a>安装Jekyll</h2><h3 id="windows-踩坑"><a href="#windows-踩坑" class="headerlink" title="windows 踩坑"></a>windows 踩坑</h3><ul>
<li>用bundle exec jekyll xxx</li>
<li>tzinfozone可以去掉</li>
<li>bundle add webrick</li>
</ul>
<h1 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h1><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>主目录下添加如下设置，让hexo直接把jekyll生成的静态站点复制到最终public</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">skip_render:</span><br><span class="line">- academic/**</span><br></pre></td></tr></table></figure>
<p>同时在主题配置里增加导航页面，以Next为例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">- ...</span><br><span class="line">- academic: /academic/ || fa fa-book</span><br></pre></td></tr></table></figure>

<h2 id="Build流程"><a href="#Build流程" class="headerlink" title="Build流程"></a>Build流程</h2><ol>
<li>学术主页build <code>cd academic &amp; bundle exec jekyll build -d ../source/academic</code></li>
<li>个人主页build&amp;deploy <code>hexo g -d</code></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>科研萌新踩坑经验</title>
    <url>/2022/05/25/DR-summary/</url>
    <content><![CDATA[<h2 id="遇到的Bug"><a href="#遇到的Bug" class="headerlink" title="遇到的Bug"></a>遇到的Bug</h2><ul>
<li>BlenderProc 处理3D-Front数据集的代码有问题，对材质的解析不对</li>
<li>Blender文件中材质可能用本地的绝对路径存放，所以到其他电脑上加载不出来</li>
</ul>
<h2 id="自己的问题"><a href="#自己的问题" class="headerlink" title="自己的问题"></a>自己的问题</h2><h3 id="能力方面"><a href="#能力方面" class="headerlink" title="能力方面"></a>能力方面</h3><p>要提升的：</p>
<ul>
<li>表达能力</li>
<li>写作能力</li>
<li>合作能力</li>
</ul>
<p>要学习的内容：</p>
<ul>
<li>最优传输</li>
<li>GRE</li>
<li>GAMES104</li>
<li>Latex</li>
<li>RT可微渲染</li>
</ul>
<h3 id="心态方面"><a href="#心态方面" class="headerlink" title="心态方面"></a>心态方面</h3><ul>
<li>冷静</li>
<li>保持自我</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>将技能学习融入日常<br>经常写点论文<br>日常周报时画图精美一点</p>
]]></content>
      <tags>
        <tag>Technique</tag>
        <tag>Experience</tag>
      </tags>
  </entry>
  <entry>
    <title>Photo Test</title>
    <url>/2021/08/10/photoTest/</url>
    <content><![CDATA[<p><img src="/2021/08/10/photoTest/1.jpg"></p>
<span id="more"></span>
<p><img src="https://cdn.jsdelivr.net/gh/jkxing/Images@main/iMac%E5%80%92%E5%BD%B1.jpg" alt="iMac倒影"><br><img src="https://i.loli.net/2021/08/10/oV6P3l7RgqzGZDK.jpg" alt="篮球"></p>
]]></content>
      <tags>
        <tag>photography</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2022/03/12/test/</url>
    <content><![CDATA[<p>或许会重启更新？</p>
]]></content>
  </entry>
  <entry>
    <title>Geek-3588折腾记录</title>
    <url>/2022/09/20/dorm-router/</url>
    <content><![CDATA[<p>买的Geek-3588主机到了后，想着折腾折腾</p>
<ol>
<li>软路由</li>
<li>alist云盘挂载</li>
<li>个人照片处理器</li>
</ol>
<h1 id="软路由"><a href="#软路由" class="headerlink" title="软路由"></a>软路由</h1><p>他有俩网口+一个Wifi，那可以搞个软路由啊</p>
<p>没有openwrt支持，那就从ubuntu/debian开始吧</p>
<p>开始想着用docker版openwrt把网卡接进去，但第一版系统装docker有点问题，有几个问题</p>
<ol>
<li>有个内核选项没开，装docker报奇奇怪怪的错，</li>
<li>默认的是nftables，需要改成iptables</li>
<li>默认无法联网，需要自己改resolv.conf</li>
</ol>
<p>不过在反映给开发者后很快就修复了，点个赞，第二版系统很顺利的装了docker</p>
<p>但是docker版openwrt有点难用，特别是接入wifi，查了一圈不知道怎么搞，遂放弃</p>
<p>那就直接来吧，我的需求如下：</p>
<ol>
<li>移动宽带接入</li>
<li>校园网接入</li>
<li>校园内网走校园网接口，其他走宽带</li>
<li>提供热点</li>
<li>支持科学上网</li>
</ol>
<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>系统：debian11</p>
<p>网卡三张:eth0,eth1,wlan0</p>
<p>全程在root下进行</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="宽带校园网接入"><a href="#宽带校园网接入" class="headerlink" title="宽带校园网接入"></a>宽带校园网接入</h3><p>插入网线即可，两张网卡默认就是dhcp客户端模式</p>
<h3 id="路由规则"><a href="#路由规则" class="headerlink" title="路由规则"></a>路由规则</h3><p>route搞一搞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#校园网优先</span><br><span class="line">route add -net 166.111.0.0/16 metric 1 dev eth1 gw 59.66.209.1</span><br><span class="line">route add -net 101.6.0.0/16 metric 1 dev eth1 gw 59.66.209.1</span><br><span class="line">route add -net 101.5.0.0/16 metric 1 dev eth1 gw 59.66.209.1</span><br><span class="line">route add -net 183.172.0.0/16 metric 1 dev eth1 gw 59.66.209.1</span><br><span class="line">route add -net 59.66.0.0/16 metric 1 dev eth1  gw 59.66.209.1</span><br><span class="line">#其他走宽带</span><br><span class="line">route add -net 0.0.0.0/0 metric 2 dev eth0 gw 192.168.10.1#内网地址</span><br></pre></td></tr></table></figure>
<h2 id="提供热点"><a href="#提供热点" class="headerlink" title="提供热点"></a>提供热点</h2><p>利用hostapd+dnsmasq来做，假设分配192.168.150.0/24为wifi网段吧</p>
<p>/etc/dnsmasq.conf设置如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind-interfaces</span><br><span class="line">interface=wlan0</span><br><span class="line">dhcp-range=192.168.150.2,192.168.150.100</span><br></pre></td></tr></table></figure>

<p>/etc/hostapd.conf设置如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface=wlan0</span><br><span class="line">driver=nl80211</span><br><span class="line">ssid=yourssid</span><br><span class="line">hw_mode=a</span><br><span class="line">channel=36</span><br><span class="line">wpa=1</span><br><span class="line">wpa_passphrase=yourpass</span><br><span class="line">wpa_key_mgmt=WPA-PSK</span><br><span class="line">wpa_pairwise=TKIP CCMP</span><br><span class="line">wpa_ptk_rekey=600</span><br><span class="line">macaddr_acl=0</span><br></pre></td></tr></table></figure>

<p>启动方式如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开始还要允许wlan0把流量转给eth0和eth1，可能有些没用的，不管了</span><br><span class="line">iptables -A FORWARD -i wlan0 -o eth0  -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i wlan0 -o eth1  -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i eth0 -o wlan0 -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i eth1 -o wlan0 -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">iptables -t nat -A POSTROUTING -o eth1 -j MASQUERADE</span><br><span class="line">iptables -A INPUT -s 192.168.150.1 -d 0.0.0.0/0 -j ACCEPT</span><br><span class="line"># 开启转发</span><br><span class="line">sysctl net.ipv4.ip_forward=1</span><br><span class="line"># 配置无线网卡ip</span><br><span class="line">ifconfig wlan0 192.168.150.1</span><br><span class="line">#开启 dnsmasq用来dhcp，hostapd用来设置热点</span><br><span class="line">systemctl start dnsmasq</span><br><span class="line">hostapd /etc/hostapd.conf &amp; </span><br></pre></td></tr></table></figure>

<h3 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h3><p>下载<a href="https://github.com/Dreamacro/clash/releases">clash</a>和配置文件</p>
<p>配置文件打开allow lan模式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">allow lan:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>启动方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">path/to/clash -d path/to/config</span><br></pre></td></tr></table></figure>

<p>使用方式：连接热点后把代理设置为路由器地址，端口在clash配置文件里</p>
<p>要想完全透明代理，可能得用clash tun模式，不想搞了。</p>
<p>完活</p>
]]></content>
  </entry>
  <entry>
    <title>term_plan</title>
    <url>/2022/09/21/term-plan/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>PBDR-L项目计划</title>
    <url>/2023/02/07/PBDR-L/</url>
    <content><![CDATA[<h2 id="工作安排"><a href="#工作安排" class="headerlink" title="工作安排"></a>工作安排</h2><ul>
<li>方法代码：Torch+Optix，支持Mesh，支持Diffuse，Specular，Transparent，GGX材质</li>
<li>Effect: 高光、阴影、反射折射、焦散</li>
<li>实验：对比PSDR、Mitsuba3</li>
<li>论文<h2 id="日程安排"><a href="#日程安排" class="headerlink" title="日程安排"></a>日程安排</h2>2月-3月中： 方法代码+论文方法部分<br>3月中-5月初：实验+论文其他部分<br>5月初-截稿：修改润色论文，补充实验</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>学期计划</title>
    <url>/2023/02/06/new-term-plan/</url>
    <content><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul>
<li>Siggraph Asia 投稿</li>
<li>Work Life Balance</li>
<li>6月之前不买电子产品</li>
<li>养成好习惯</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>piwigo_deploy</title>
    <url>/2022/08/16/piwigo-deploy/</url>
    <content><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ul>
<li>买了一个rk3588的小主机，装了Ubuntu，没想好能干点啥</li>
<li>和女朋友的400天纪念日要到了</li>
<li>最近拍了好多照片</li>
</ul>
<h1 id="决定"><a href="#决定" class="headerlink" title="决定"></a>决定</h1><p>用rk3588搭一个本地照片服务器，挑400张照片当作纪念日的仪式——“400天400张”</p>
<h1 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h1><p>肯定是基于docker来做了，看看常见的自建相册，看到最常见的是这俩：</p>
<ul>
<li>photoprism</li>
<li>piwigo</li>
</ul>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>开始觉得piwigo还在用php，太老了，于是先搭了一个photoprism</p>
<h2 id="photoprism"><a href="#photoprism" class="headerlink" title="photoprism"></a>photoprism</h2><p>这个很新，官网文档很好，直接用官网的docker-compose就好了（安装docker我就不写了），试用了一下，评价如下：</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>速度快</li>
<li>动画优雅</li>
<li>部署容易</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>界面单调，好像还改不了，主页上就是相册的罗列，还很小，不美观</li>
<li>人脸识别功能就是个笑话，100张人像就识别出来10几个</li>
</ul>
<p>缺点有点难以忍受，遂放弃</p>
<h2 id="piwigo"><a href="#piwigo" class="headerlink" title="piwigo"></a>piwigo</h2><p>这个用docker搭的轮子虽然有，但是不多，简单写一下</p>
<p>这个需要和数据库相连，所以可以再搞一个数据库的docker</p>
<p>图方便，想找一个一键部署的，找到了<a href="https://github.com/moritzheiber/piwigo-docker">这个</a>，看着不错，部署一下。</p>
<p>发现mysql的image不适配armv8架构，于是换了一个armv8的mysql</p>
<p>成功了，但是只能通过网页传照片</p>
<p>然后尝试bind一个volume进去，开始一直bind不上，不知道怎么回事，彻底重搞一下就好了，这里折腾了蛮久。</p>
<p>把最终的docker-compose放一下</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  piwigo:</span><br><span class="line">    container_name: piwigo</span><br><span class="line">    image: piwigo-docker:latest</span><br><span class="line">    networks:</span><br><span class="line">      - piwigo</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;&lt;宿主端口号&gt;:8000&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">            - &lt;宿主机映射目录&gt;:/piwigo/piwigo/galleries</span><br><span class="line"></span><br><span class="line">  mysql:</span><br><span class="line">    container_name: piwigo_mysql</span><br><span class="line">    image: arm64v8/mysql</span><br><span class="line">    command: [<span class="string">&quot;--default-authentication-plugin=mysql_native_password&quot;</span>]</span><br><span class="line">    networks:</span><br><span class="line">      - piwigo</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_USER: <span class="string">&quot;piwigo&quot;</span></span><br><span class="line">      MYSQL_PASSWORD: <span class="string">&quot;piwigo&quot;</span></span><br><span class="line">      MYSQL_DATABASE: <span class="string">&quot;piwigo&quot;</span></span><br><span class="line">      MYSQL_RANDOM_ROOT_PASSWORD: <span class="string">&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  piwigo:</span><br></pre></td></tr></table></figure>
<p>docker 镜像用的就是刚才那个github链接里的，登录什么的也参考那个连接就行了</p>
<p>提示一下：把照片传到bind出来的目录后要在piwigo管理页面同步一下才能导入</p>
<p>piwigo的评价：</p>
<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul>
<li>主题丰富（插件看着也很多，还没试），装了一个bootstrap的theme（管理员界面的官方商城就有）</li>
<li>比较美观，头图、相册显示大小都可以调</li>
</ul>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>速度有点慢</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然简单，但是加起来也折腾了4-5个小时，对docker什么的不太熟，碰到一些bug又有点无头苍蝇乱撞的感觉，还是自己能力不太够，还有就是看文档要再仔细一点，不要光抄命令。</p>
<p>对于相册的选择的话建议也就比较显然了，piwigo现在更好用，但也有缺点，photoprism未来可期。</p>
]]></content>
      <tags>
        <tag>Technique</tag>
      </tags>
  </entry>
  <entry>
    <title>实践记录——游戏引擎相关</title>
    <url>/2021/08/10/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<ul>
<li><p>8月5日，我们分别对腾讯游戏北极光工作室群客户端技术总监安柏霖和不鸣科技公司的多名成员进行了访谈。北极光工作室与不鸣科技都有自主研发的游戏引擎，我们也着重对此进行了探究。本文主要分为4个部分：</p>
<ul>
<li>游戏引擎介绍</li>
<li>两家公司自研引擎的特点</li>
<li>内部引擎与商业引擎的对比</li>
<li>游戏引擎的发展方向与决定因素<span id="more"></span></li>
</ul>
</li>
<li><p>游戏引擎介绍</p>
<ul>
<li><p>游戏引擎是什么</p>
<p>游戏引擎是让游戏设计者能容易和快速地做出游戏的程序，这些程序为游戏设计者提供各种编写游戏所需的工具，而不用由零开始。大多数游戏引擎包含以下系统：渲染引擎、物理引擎、声音引擎、脚本引擎、网络引擎、动画系统以及资源管理系统等。它们可以方便的让游戏跨平台，可以节省大量的游戏开发费用，降低开发的复杂性，缩短游戏的上市时间，所有这些对于高竞争性的游戏产业来说都是关键因素。</p>
</li>
<li><p>与制作电影的引擎的异同</p>
<p>游戏引擎与制作电影的引擎的模块组成是相似的，而两者最大的区别在于游戏的渲染需要实时性。电影的画面渲染没有时间的限制，其关注点完全在于真实感，一帧画面往往需要在大规模集群上渲染数分钟。而游戏是需要用户交互的，用户的操作会实时的影响到画面，所以留给一帧画面的渲染时间往往只有几十毫秒甚至几毫秒，要在如此短的时间之内完成渲染，我们就无法使用高开销的渲染算法，因此，在真实感上自然是无法比肩电影的。另外，一帧画面的渲染往往也要分为多个步骤、帧内不同物体的渲染还可能使用不同的算法，在这些步骤与算法之间进行时间的分配，在效果与速度上做trade-off是一个好的游戏引擎必须要着重考虑的地方。</p>
</li>
<li><p>在进入对两家公司自研引擎的特点介绍之前，我们不妨先来回顾一下去年5月份Epic Games发布的震惊全网的商业引擎虚幻5的宣传片，从中我们可以看到如今的游戏引擎能实时渲染出的画面的真实程度、以及一系列提高玩家游戏沉浸感与开发者工作效率的技术。</p>
<iframe src="//player.bilibili.com/player.html?aid=498190004&bvid=BV1BK411W75W&cid=190794216&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></li>
</ul>
</li>
<li><p>两家公司自研引擎的特点</p>
<ul>
<li><p>北极光工作室——QuickSilverX：影视级制作</p>
<ul>
<li><p>首先还是通过一段视频来欣赏一下QuickSilverX渲染出的游戏画面吧~</p>
<iframe src="//player.bilibili.com/player.html?aid=460551375&bvid=BV1B541137gP&cid=338768078&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></li>
<li><p>北极光工作室的技术总监安柏霖提到，QuickSilverX引擎最大的特点是用影视级的标准来制作游戏。影视级标准主要分为两方面，第一是影视级画面，第二是影视级工作流。</p>
<ul>
<li><p>影视级画面：随着计算机技术的发展，硬件的性能越来越强，这就让很多曾经只能用于离线渲染的算法变得可以应用在实时渲染中，因此，游戏画面的真实感也在不断的加强。目前在很多场景下，已经可以做到和影视级画面相差无几，让人难以分辨的程度。当然，除了硬件的发展，引擎的效率也是提升画面效果的重要因素。在这一点上，安总监提到，引擎最重要的就是优化（提高效率），而优化纯靠硬功夫，拼的就是内力、是技术能力。给引擎添加新的feature往往都是年轻员工甚至实习生的工作，而资深程序员（包括安总监本身）做的事情就是优化。优化需要对引擎的架构有着很深的理解，这是需要多年的经验积累才能拥有的，安总监将这样的程序员称为”老妖级程序员“，这样的程序员的价值是巨大的。</p>
</li>
<li><p>影视级工作流</p>
<p>相比需要硬功夫的影视级画面，影视级工作流更多的是定义一种用影视的规范来制作游戏的标准和提供影视级别的数据。可以举一个例子来说，在游戏开发中我们会放置各种物体，每种物体有其材质，传统的游戏开发流程可能只是把物体放在场景中，看起来效果不错就算成功，而影视级的标准则要求对这个物体做详细的检测，保证其在不同角度、强度的光照下都能保持正确（如能量守恒），这样才能进入到游戏的可用素材当中。此外还有动作捕捉、真实场景光线采样等等电影行业已经有成熟的流程，而游戏行业还不怎么重视的工作，这都是实现影视级工作流需要完善的。在这一点上，国内和世界先进水平也存在一定差距，目前主流的3A大作还是以欧美制作为主，以两个经典游戏战神、顽皮狗为例，其开发团队在洛杉矶，就在好莱坞旁边，其编剧、动捕、特效师等往往是通用的，这就在很大程度上保证了他们用来做游戏的素材都是影视级别、具有高度真实感的，而这也是我们需要学习的地方。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>不鸣科技-CHAOS：面向多核与网络游戏的自研引擎</p>
<ul>
<li><p>还是先通过一段游戏视频来欣赏一下CHAOS渲染出的游戏画面吧~</p>
</li>
<li><iframe src="//player.bilibili.com/player.html?aid=885284873&bvid=BV13K4y1j7is&cid=303762514&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></li>
<li><p>CHAOS开发于2011年，当年计算机的发展趋势已经从提高单个核心的主频转移到增加核心数，所以CHAOS的设计初衷就是面向多核的， 相比Unity、虚幻这种商业引擎，CHAOS对CPU和GPU的利用率更高，而且对开发者更加友好，开发者不需要了解很多的计算机工作原理，也能充分利用电脑的性能。</p>
</li>
<li><p>另一方面，不鸣科技的几位成员谈到，他们认为网络游戏会在未来成为主流，而目前没有一个完善的具有服务器端的引擎。当前的网络游戏开发有两种形式，一种是编写客户端的引擎，然后单独开发网络通信部分，另一种是给引擎做简单的修改，以满足特定的通信需求。而CHAOS提供了一个完整的、集成在引擎内部的客户端和服务端的通信机制，可适用于各种游戏，这样就使得游戏开发变得更加便捷。</p>
</li>
<li><p>CHAOS的这两个特点在游戏《战意》中都得到了充分的展现，游戏中同屏的独立单位数量、场景复杂度都远远超过了同时期的游戏，另外在玩法上，战意也由于拥有完善的网络通信机制，可支持15 vs 15的多人对战，甚至连接全服玩家的大世界玩法。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>与商业引擎的对比</p>
<ul>
<li><p>从第一个视频中我们也可看到，如虚幻引擎这种商业引擎也可做出十分优秀的效果。但目前游戏行业的头部产品中85%-90%都是自主研发的内部引擎做出的。那么，从游戏开发的角度来讲，如何从商业引擎和自主研发引擎进行选择呢？</p>
</li>
<li><p>商业引擎的优点是比较显而易见的，就是门槛低，易于上手。对于没有能力去自主研发引擎的中小型游戏工作室，商业引擎能提供一套质量还不错的工具链。内部引擎相比商业引擎，要花大量的时间进行引擎的开发，那这样做的好处是什么呢？其核心原因就是<strong>定制化</strong>。</p>
</li>
<li><p>事实上，不同的游戏对引擎的需求是不一样的，要想达到最高标准，就一定要针对游戏专门定制引擎，用安总监的一个比喻来说：就像是一个运动员只参加奥运会的一个小范围内的比赛。这一点如何理解呢？不同的游戏的画面风格和玩法是不同的，如彩虹六号有大量的物体破坏，赛博朋克2077有数量众多、形状复杂的光源、最终幻想系列美型的角色。在第一部分我们也提到，游戏引擎要将极其有限的时间分配给引擎的不同系统和不同的画面内容，在质量和速度上做trade-off，不同游戏的玩法和特点决定了应该为每个部分分配多少时间进行计算，而这是只有内部引擎才能实现的定制化需求。内部引擎可以在局部达到过量投入，让看重的核心技术达到最先进。如彩虹六号需要优秀的碰撞检测系统，最终幻想需要更加高级的人物渲染模型与算法（特别是头发部分，解决方案非常多，花费的时间越多效果就越好）。</p>
</li>
<li><p>另一方面，游戏的开发周期经常是三年左右，其间可能经常会出现新的想法，实现这些想法可能需要对引擎做出调整，而内部引擎可以更快的进行深度定制 ，比商业引擎更加灵活。</p>
</li>
<li><p>分析至此，如何选择商业和内部引擎也就显而易见了。追求最佳效果的高端产品最好使用内部引擎，而中低端产品使用商业引擎即可。高端产品用内部引擎做游戏，也不单是为了最佳质量，更有带动引擎技术发展的作用，其在研发过程中采用的新技术可能逐渐会下落到商业引擎上。</p>
</li>
</ul>
</li>
<li><p>游戏引擎的发展方向与决定因素</p>
<ul>
<li>引擎的发展首先要符合其依托的，更底层的，实际运行大量计算的硬件平台的发展趋势。安总监提到：英伟达推出的显卡是游戏引擎发展的一个风向标，近几年发展迅速的RTX系列显卡，提供了新的CUDA核心、光追核心、Tensor核心，这表明接下来引擎的技术也要充分的与这些新的硬件想结合。北极光也和英伟达有很多交流，可以预先进行布局。</li>
<li>另外还有一些基于硬件的发展趋势：<ul>
<li>充分利用CPU越来越多的核心数，提高引擎效率。</li>
<li>云化，比如将美术资源做成库。</li>
<li>AI驱动，用AI优化工具流。</li>
</ul>
</li>
<li>其次，引擎的发展还要符合未来游戏作品发展的趋势，比如未来会有越来越多的云游戏、虚拟现实游戏，这都会对引擎提出新的需求，另外，游戏的玩法也会不断发展，玩法也要和引擎的核心技术产生强联系。</li>
<li>第三点，也是可以让我们的想象空间大幅度扩展的一点，就是游戏引擎的跨领域应用。先从关系较为密切的领域来说，目前一些电影的实际制作过程就在使用游戏引擎，主要是利用实时渲染进行画面的预览，有些低要求的场景也可以直接用实时渲染作为最终结果。游戏引擎也会应用于很多需要计算机辅助设计的行业如建筑，D5公司就把虚幻引擎用到建筑设计上，利用最新的光线追踪算法为建筑设计师提供高真实感的设计预览图。</li>
<li>进一步扩大想象空间，除了渲染部分，游戏引擎的其它系统也有跨界的应用。比如不鸣科技就用游戏引擎构建了一个虚拟运载火箭，通过进行完整外形结构、气动力模型和内部近万个控制功能原件的功能、逻辑、交互的建模，从而构建出一个虚实同步的数字孪生体运载火箭，实现了数字复盘、天地同步、发射推演几个过程。从更普遍的意义上说，在如今数字化的浪潮之下，引擎可以帮助我们构造一个数字孪生世界，这个世界会对我们的生产效率、生活质量等方方面面都产生巨大的影响！</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>采访</category>
      </categories>
      <tags>
        <tag>游戏引擎</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>博客双端部署设置</title>
    <url>/2023/01/24/blog-deploy/</url>
    <content><![CDATA[<p>这个博客部署在了两个地方，一个是github托管的jkxing.github.io，另一个是腾讯云的服务器，域名jiankai-cloud.ltd，后者在备案的时候需要用一个奇怪的名字作为title，但我一直没管。前两天检查的时候说我名字不对，所以就想着部署两份出来，一份和原来一样传github，一份按照要求改后传腾讯。<br>其实改法也很简单.首先复制一份_config.yaml出来，改一个名字，把该改的改了，然后改下deploy，这里我用的是rsync,改成下面这样就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: rsync</span><br><span class="line">  host: hostname</span><br><span class="line">  user: username</span><br><span class="line">  root: path</span><br><span class="line">  port: port</span><br><span class="line">  delete: true</span><br><span class="line">  verbose: true</span><br><span class="line">  ignore_errors: true</span><br></pre></td></tr></table></figure>
<p>然后生成用<code>hexo g --config new_config.yml</code>, 预览用<code>hexo s --config new_config.yml</code>，部署用<code>hexo d --config new_config.yml</code>，反正就加个后缀就行了。</p>
<p>官网给的，也是最容易搜索到的方法用着报错，这是从评论区里找的，所以就放在这里记录一下。</p>
]]></content>
  </entry>
</search>
